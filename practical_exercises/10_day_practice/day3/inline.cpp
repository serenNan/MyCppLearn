/* 内联函数.cpp */
/*
内联函数和普通函数的主要区别如下：

1. **函数展开**：
   - 内联函数：编译器会将函数体直接插入到调用处，不会生成函数调用指令。
   - 普通函数：调用时生成函数调用指令，跳转到函数定义处执行。

2. **效率**：
   - 内联函数：减少函数调用开销，特别适用于小函数，提高性能。
   - 普通函数：虽然函数调用有一定开销，但对大型函数可能更合适，避免代码膨胀。

3. **定义限制**：
   - 内联函数：必须在每个使用它的文件中声明，否则会导致编译错误。
   - 普通函数：只需在单一文件中定义，其他文件通过声明即可使用。

4. **静态变量**：
   - 内联函数：不能在函数体内定义静态变量，避免不同文件中重复定义。
   - 普通函数：可以定义静态变量，保持函数间的数据状态。

5. **编译要求**：
   - 内联函数：通常在所有使用的地方都必须标记为内联。
   - 普通函数：在声明时无需标记，编译时自动生成调用指令。

总结：内联函数在性能上更高效，尤其适合小函数，但使用时需注意声明和定义的限制；而普通函数更具灵活性，适用于各种情况，但可能在小函数的效率上稍逊。
*/
#include <iostream>
using namespace std;
//函数声明
inline double CalArea(double radius);
int main() {
  double r(3.0);
  double area;
  area = CalArea(r);
  cout << area << endl;
  
  return 0;
}
//加关键字inline
inline double CalArea(double radius) { return 3.14 * radius * radius; }